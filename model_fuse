import torch
from torch import Tensor
import torch.nn as nn
from typing import Callable, List, Optional
from deform_conv_model import DeformConv2D



def conv3x3(in_planes: int, out_planes: int, stride: int = 1, groups: int = 1, dilation: int = 1) -> nn.Conv2d:
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=dilation, groups=groups, bias=False, dilation=dilation)

def deform_conv3x3(in_planes: int, out_planes: int, stride: int):
    return DeformConv2D(in_planes, out_planes, kernel_size=3, stride=stride)

def conv1x1(in_planes: int, out_planes: int, stride: int = 1) -> nn.Conv2d:
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)

class SMU(nn.Module):
    def __init__(self, mu=1000000, alpha=0.5):
        super(SMU, self).__init__()

        self.mu = torch.tensor(mu, dtype=torch.float32)

        self.alpha = torch.tensor(alpha, dtype=torch.float32)



    def forward(self, x):
        return ((1 + self.alpha) * x + (1 - self.alpha) * x * torch.erf(self.mu * (1 - self.alpha) * x)) / 2


class SMU1(nn.Module):
    def __init__(self, mu=4.352665993287951e-9, alpha=0.5):
        super(SMU1, self).__init__()

        self.mu = torch.FloatTensor(mu).cuda()
        self.alpha = torch.FloatTensor(alpha).cuda()

    def forward(self, x):
        return ((1 + self.alpha) * x + torch.sqrt(torch.square(x - self.alpha * x) + torch.square(self.mu))) / 2


class Bottleneck(nn.Module):

    expansion: int = 4

    def __init__(
        self,
        inplanes: int,
        planes: int,
        stride: int = 1,
        downsample: Optional[nn.Module] = None,
        deform_conv = False,
        groups: int = 1,
        base_width: int = 64,
        dilation: int = 1,
        norm_layer: Optional[Callable[..., nn.Module]] = None
    ) -> None:
        super(Bottleneck, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        width = int(planes * (base_width / 64.)) * groups
        self.conv1 = conv1x1(inplanes, width)
        self.bn1 = norm_layer(width)
        self.conv2 = conv3x3(width, width, stride, groups, dilation)
        self.bn2 = norm_layer(width)
        self.conv3 = conv1x1(width, planes * self.expansion)
        self.bn3 = norm_layer(planes * self.expansion)
        self.smu = SMU()
        self.downsample = downsample
        self.stride = stride
        self.deform_conv = deform_conv

        self.off_conv = nn.Conv2d(width, 3*6, kernel_size=3, padding=1)
        self.deform_conv2 = deform_conv3x3(width, width, stride)


    def forward(self, x: Tensor) -> Tensor:
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.smu(out)

        if self.deform_conv:
            off_out = self.off_conv(out)

            out = self.deform_conv2(out, off_out)

            out = self.bn2(out)
            out = self.smu(out)
        else:
            out = self.conv2(out)
            out = self.bn2(out)
            out = self.smu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            identity = self.downsample(x)


        out += identity
        out = self.smu(out)

        return out


class ResNet(nn.Module):

    def __init__(
        self,
        block: Bottleneck = Bottleneck,
        layers: List[int] = [3, 8, 36, 3],
        num_classes: int = 10,
        zero_init_residual: bool = False,
        groups: int = 1,
        width_per_group: int = 64,
        replace_stride_with_dilation: Optional[List[bool]] = None,
        norm_layer: Optional[Callable[..., nn.Module]] = None
    ) -> None:
        super(ResNet, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        self._norm_layer = norm_layer

        self.inplanes = 64
        self.dilation = 1
        if replace_stride_with_dilation is None:
            replace_stride_with_dilation = [False, False, False]

        self.groups = groups
        self.base_width = width_per_group
        self.conv1_1 = nn.Conv2d(3, self.inplanes, kernel_size=3, stride=2, padding=1,
                                 bias=False)

        self.conv1_2 = nn.Conv2d(3, self.inplanes, kernel_size=3, stride=2, padding=1,
                                 bias=False)

        self.conv1_3 = nn.Conv2d(3, self.inplanes, kernel_size=3, stride=2, padding=1,
                                 bias=False)

        self.bn1 = norm_layer(self.inplanes)
        self.smu = SMU()
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2,
                                       dilate=replace_stride_with_dilation[0])
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2,
                                       dilate=replace_stride_with_dilation[1])
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2,
                                       dilate=replace_stride_with_dilation[2], deform=True)
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

        if zero_init_residual:
            for m in self.modules():
                nn.init.constant_(m.bn3.weight, 0)

    def _make_layer(self, block: Bottleneck, planes: int, blocks: int,
                    stride: int = 1, dilate: bool = False, deform=False) -> nn.Sequential:
        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                conv1x1(self.inplanes, planes * block.expansion, stride),
                norm_layer(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, deform, self.groups,
                            self.base_width, previous_dilation, norm_layer))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes, deform_conv=deform, groups=self.groups,
                                base_width=self.base_width, dilation=self.dilation,
                                norm_layer=norm_layer))

        return nn.Sequential(*layers)

    def forward(self, x: Tensor):
        x_1 = self.conv1_1(x)
        x_2 = self.conv1_2(x)
        x_3 = self.conv1_3(x)
        x = x_1 + x_2 + x_3

        x = self.bn1(x)
        x = self.smu(x)
        x = self.maxpool(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.fc(x)

        return x


if __name__ == '__main__':
    model = ResNet()
    out = model(torch.ones((2, 3, 128, 128)))
    print(out.shape)

